function GenerateSynthVaryNoise( )

rng(1);
sqrtN = 18;
synth_sig = linspace(0,9,10);
blurring = 0.2;

coords = zeros(sqrtN^2,2);
adj_list = cell(sqrtN^2,1);
for r = 1:sqrtN
    for c = 1:sqrtN
        currVox = c + (r-1)*sqrtN;
        coords(currVox,:) = [r c];
        adj_list{currVox} = [];
        if (r > 1)
            adj_list{currVox} = [adj_list{currVox} (c+(r-2)*sqrtN)];
        end
        if (r < sqrtN)
            adj_list{currVox} = [adj_list{currVox} (c+r*sqrtN)];
        end
        if (c > 1)
            adj_list{currVox} = [adj_list{currVox} (c-1+(r-1)*sqrtN)];
        end
        if (c < sqrtN)
            adj_list{currVox} = [adj_list{currVox} (c+1+(r-1)*sqrtN)];
        end
    end
end

% Square
z = [ ...
 1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
 1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
 1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
 1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
 1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
 1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
 2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
 2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
 2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
 2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
 2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
 2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
 3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
 3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
 3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
 3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
 3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
 3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9];
% sigratio = [ ...
%  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
%  2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 ...
%  2 1 0 0 1 2 2 1 0 0 1 2 2 1 0 0 1 2 ...
%  2 1 0 0 1 2 2 1 0 0 1 2 2 1 0 0 1 2 ...
%  2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 ...
%  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
%  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
%  2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 ...
%  2 1 0 0 1 2 2 1 0 0 1 2 2 1 0 0 1 2 ...
%  2 1 0 0 1 2 2 1 0 0 1 2 2 1 0 0 1 2 ...
%  2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 ...
%  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
%  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
%  2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 ...
%  2 1 0 0 1 2 2 1 0 0 1 2 2 1 0 0 1 2 ...
%  2 1 0 0 1 2 2 1 0 0 1 2 2 1 0 0 1 2 ...
%  2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 ...
%  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2];
for s = 1:length(synth_sig);
    D = GenConnectivity(z, synth_sig(s), blurring, adj_list);
    save(['../data/synth/vary_' num2str(s) '.mat'],'coords','adj_list','z','D','blurring');
end

end

function D = GenConnectivity(z, sig, blurring, adj_list)

N = length(z);
K = length(unique(z));

A = randn(K,K);

D = zeros(N, N);
for v1 = 1:N
    for v2 = 1:N
        if (v1 ~= v2)
            adjA_v1 = mean(A(setdiff(z(adj_list{v1}),z(v1)),z(v2)));
            adjA_v2 = mean(A(z(v1),setdiff(z(adj_list{v2}),z(v2))));
            adjA = [adjA_v1 adjA_v2];
            adjA = mean(adjA(~isnan(adjA)));
            if (isnan(adjA))
                D(v1,v2) = sig*randn(1) + A(z(v1),z(v2));
            else
                D(v1,v2) = sig*randn(1) + (1-blurring)*A(z(v1),z(v2)) + blurring*adjA;
            end
        end
    end
end
end